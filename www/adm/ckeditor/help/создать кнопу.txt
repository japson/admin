Расширяем функционал CKEditor

        anima_mudi wrote in ru_quadrata
        February 26th, 2010

    Для начала стоит чуть поподробнее остановиться на вопросе, что же это такое - CKEditor. Это визуальный редактор текста, преднаначенный для встраивания в web-страницы. Данный редактор выглядит весьма похоже на MS Word, поэтому даже новичок может сходу начать в нем работать (хотя на самом деле, все-таки стоит понять основы работы с HTML и языками разметки вообще). В этой статье я опишу, как расширить функционал редактора за счет добавления новых кнопок и их обработчиков.

    Не так давно вышла третья версия этого редактора, ознаменовавшаяся переименованием (раньше он назывался FCKeditor), а также полным переписыванием всей базы кода. В результате, как не трудно догадаться, вся старая документация стала бесполезной.

    Для начала мы напишем простенький плагин, который будет добавлять в редактор кнопку, при нажатии на которую пользователь сможет создать «кат» — элемент, указывающий, что в этом месте страницу нужно разбить на две части.

    Устройство плагинов для CKEditor
    Что такое плагин для CKEditor? С третьей версии редактора, весь взаимодействующий с пользователем функционал редактора реализован плагинами. Это сделано для увеличения гибкости и простоты настройки редактора. Кроме этого, такая архитектура позволяет легко удалить ненужные плагины из редактора и перекомпилировать (в данном случае этот термин, разумеется, применен условно:)) его, что также приведет к уменьшению объема загружаемых файлов.

    Так вот, плагин — это папка определенной структуры, хранящаяся в папке plugins. Структура папки:

        dialogs — в этой папке хранятся все диалоговые окна, используемые плагином;
        images — очевидно, здесь лежат изображения;
        plugin.js — основной файл плагина, содержащий объявления диалогов, описание создаваемых плагином кнопок на панели инструментов и т.д.

    Создаем плагин
    Начнем с самого интересного: с файла plugin.js. В этом файле нам нужно сделать три вещи: создать кнопкку, зарегистрировать диалог, и создать команду CKEditor, а также привязать нажатие кнопки к выполнению команды.

    CKEDITOR.plugins.add('cuttable', {
      init : function(editor) {
        var command = editor.addCommand('cuttable', new CKEDITOR.dialogCommand('cuttable'));
        command.modes = {wysiwyg:1, source:1};
        command.canUndo = true;

        editor.ui.addButton('Cuttable', {
          label : 'Создать Cut',
          command : 'cuttable',
          icon: '/your/path/to/icon/cut.png'
        });

        CKEDITOR.dialog.add('cuttable', this.path + 'dialogs/cuttable.js');
      }
    });

    Это, собственно весь файл:) Как видно, ничего сложного, если знать как это работает. Разберемся, поподробнее в происходящем:

        CKEDITOR.plugins.add(pluginName, plugin); - эта строчка добавляет плагин с именем pluginName (в нашем случае, мы назвали его cuttable). В качестве второго агрумента принимается объект, реализующий плагин. В это объекте обязательно должна присутствовать функция init, инициализирующая плагин. В нашем случае, объект состоит из одной этой функции. Разберем ее поподробнее.
        var command = editor.addCommand('cuttable', new CKEDITOR.dialogCommand('cuttable'));. Этой строчкой мы создали команду на создание диалога, и назвали ее cuttable. Следующими строками мы указываем, что эта команда должна работать как в режиме wysiswig, так и в режие просмотра исходников, а также возможность отмены действия.
        editor.ui.addButton('cuttable', options);. Создаем кнопку на панели инструментов. И сразу же ее настраиваем, передав в качестве параметра options объект с тремя полями:
            label — Название кнопки. Показывается в виде всплывающей подсказки.
            command — вызываемая при нажатии кнопки команда.
            icon — иконка кнопки. Собственно, изображение, которое и будет формировать кнопку.
        CKEDITOR.dialog.add( 'cuttable', this.path + 'dialogs/cuttable.js' );. Регистрируем диалог, указывая его название и путь до файла с его описанием.

    Создаем диалог
    Начнем опять с исходника:

    CKEDITOR.dialog.add('cuttable', function(editor) {
      return {
        title : 'Создать Cut',
        minWidth : 400,
        minHeight : 200,
        onOk: function() {
          var cuttext = this.getContentElement( 'cut', 'cuttext').getInputElement().getValue();
          this._.editor.insertHtml('<iktomi-cut>' + cuttext + '</iktomi-cut>');
        },
        contents : [{
          id : 'cut',
          label : 'First Tab',
          title : 'First Tab',
          elements : [{
            id : 'cuttext',
            type : 'text',
            label : 'Текст ссылки'
          }]
        }]
      };
    });

    Все, что делает эта функция — возвращает объект, описывающий диалог. Разберем по очереди все свойства и методы этого объекта:

        title — Заголовок диалогового окна;
        minWidth и minHeight — минимальные размеры диалогового окна;
        onOk. Этот метод выполняется при нажатии на кнопку Ok диалогового окна. А делает он именно то, что и планировалось - получает из диалогового окна текст ссылки-ката и вставляет нужный элемент в редактируемый документ.
        contents. Массив вкладок диалогового окна с описанием форм во вкладках. В нашем диалогово окне одна-единственная вкладка с одним текстовым элементом.

    Вот, собственно, и все! Осталось положить иконку кнопки в папку images плагина и добавить кнопку на панель инструментов в конфигурационном файле CKEditor.

    Для этого нам нужно зайти в папку, где лежит CKEditor и отредактировать лежащий там файл config.js. Если его нет - создавайте.

    CKEDITOR.editorConfig = function( config )
    {
        // Говорим CKEditor, что нужно загрузить наш плагин
        config.extraPlugins = 'cuttable'; 
        // Видите последнюю строку в массиве ? Вот мы и добавили кнопочку:)
        config.Toolbar_Example = ['Bold', 'Italic', '-', 'NumberedList', 'BulletedList', '-', 'Link', 'Unlink','-','About', '-', 'Cuttable'];
        // Теперь надо сказать CKEditor'у, какую панель инструментов использовать
        config.toolbar = 'Example';
    }

    ﻿